# Docker Compose configuration for PER Maritime Exam System
# Production-ready setup with PostgreSQL, Redis, and application services

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: per_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-per_exams}
      POSTGRES_USER: ${DATABASE_USER:-per_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-per_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=es_ES.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./backups:/backups
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-per_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - per_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: per_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - per_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Main API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION:-2.0.0}
    image: per-exam-system:${VERSION:-latest}
    container_name: per_api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application
      APP_NAME: "PER Maritime Exam API"
      DEBUG: ${DEBUG:-false}
      HOST: "0.0.0.0"
      PORT: 5001
      WORKERS: ${API_WORKERS:-4}
      
      # Database
      DATABASE_URL: postgresql://${DATABASE_USER:-per_user}:${DATABASE_PASSWORD:-per_password_change_me}@postgres:5432/${DATABASE_NAME:-per_exams}
      DATABASE_MIN_CONNECTIONS: ${DB_MIN_CONNECTIONS:-5}
      DATABASE_MAX_CONNECTIONS: ${DB_MAX_CONNECTIONS:-20}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      CACHE_PREFIX: "per_exam:"
      
      # Authentication
      JWT_SECRET: ${JWT_SECRET:-change-this-super-secret-jwt-key-in-production}
      JWT_ALGORITHM: "HS256"
      JWT_ACCESS_EXPIRE_MINUTES: ${JWT_ACCESS_EXPIRE:-60}
      JWT_REFRESH_EXPIRE_DAYS: ${JWT_REFRESH_EXPIRE:-30}
      
      # OpenAI
      OPENAI_API_KEY: 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
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4}
      OPENAI_MAX_TOKENS: ${OPENAI_MAX_TOKENS:-2000}
      OPENAI_TEMPERATURE: ${OPENAI_TEMPERATURE:-0.3}
      
      # Rate Limiting
      RATE_LIMIT_RPM: ${RATE_LIMIT_RPM:-100}
      RATE_LIMIT_BURST: ${RATE_LIMIT_BURST:-20}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:8095,http://127.0.0.1:8095}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Performance
      ENABLE_GZIP: ${ENABLE_GZIP:-true}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./backups:/app/backups
    ports:
      - "${API_PORT:-5001}:5001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - per_network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Web Frontend (Static Files)
  web:
    image: nginx:1.25-alpine
    container_name: per_web
    restart: unless-stopped
    depends_on:
      - api
    volumes:
      - ./src/web:/usr/share/nginx/html:ro
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx-default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${WEB_PORT:-8095}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - per_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring - Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: per_prometheus
    restart: unless-stopped
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - per_network
    profiles:
      - monitoring

  # Monitoring - Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: per_grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - per_network
    profiles:
      - monitoring

  # Database backup service
  backup:
    image: postgres:14-alpine
    container_name: per_backup
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${DATABASE_PASSWORD:-per_password_change_me}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    entrypoint: /backup.sh
    command: ["${DATABASE_USER:-per_user}", "${DATABASE_NAME:-per_exams}", "postgres"]
    networks:
      - per_network
    profiles:
      - backup

# Networks
networks:
  per_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local