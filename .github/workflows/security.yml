name: Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: "3.11"

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run Safety scan
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true
        safety check

    - name: Run pip-audit scan
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit

    - name: Upload vulnerability reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: vulnerability-reports
        path: |
          safety-report.json
          pip-audit-report.json

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks
      uses: zricethezav/gitleaks-action@master
      with:
        config-path: .gitleaks.toml

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install SAST tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep

    - name: Run Bandit scan
      run: |
        bandit -r src -ll -f json -o bandit-report.json || true
        bandit -r src -ll

    - name: Run Semgrep scan
      run: |
        semgrep --config=auto src --json --output=semgrep-report.json || true
        semgrep --config=auto src --severity=ERROR

    - name: Upload SAST reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: sast-reports
        path: |
          bandit-report.json
          semgrep-report.json

  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install license tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses

    - name: Install project dependencies
      run: |
        pip install -r requirements.txt

    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=plain-vertical

    - name: Check for restricted licenses
      run: |
        # Check for licenses that are not allowed
        pip-licenses --packages setuptools --format=json | jq -r '.[] | select(.License | contains("GPL") or contains("AGPL") or contains("LGPL")) | .Name' > restricted-licenses.txt
        if [ -s restricted-licenses.txt ]; then
          echo "❌ Restricted licenses found:"
          cat restricted-licenses.txt
          exit 1
        else
          echo "✅ No restricted licenses found"
        fi

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: |
          licenses.json
          restricted-licenses.txt

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t per-exam-system:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'per-exam-system:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security > docker-bench-report.txt || true
        cat docker-bench-report.txt

    - name: Upload Docker security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: docker-security-reports
        path: |
          trivy-results.sarif
          docker-bench-report.txt

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scan, sast-scan, license-scan, docker-security]
    if: always()

    steps:
    - name: Download all reports
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        echo "# Security Analysis Report" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Add results from each scan
        if [ -d "vulnerability-reports" ]; then
          echo "### Vulnerability Scan" >> security-summary.md
          echo "- Safety scan completed" >> security-summary.md
          echo "- pip-audit scan completed" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        if [ -d "sast-reports" ]; then
          echo "### Static Analysis" >> security-summary.md
          echo "- Bandit scan completed" >> security-summary.md
          echo "- Semgrep scan completed" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        if [ -d "license-report" ]; then
          echo "### License Compliance" >> security-summary.md
          echo "- License scan completed" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        if [ -d "docker-security-reports" ]; then
          echo "### Container Security" >> security-summary.md
          echo "- Trivy scan completed" >> security-summary.md
          echo "- Docker Bench scan completed" >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        echo "Generated on: $(date)" >> security-summary.md
        
        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md

  notify-security:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scan, sast-scan, license-scan, docker-security]
    if: failure() && (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - name: Notify security team
      run: |
        echo "🚨 Security scan failures detected in production branch!"
        echo "Please review the security reports immediately."
        # Add actual notification logic here:
        # - Send Slack notification
        # - Create GitHub issue
        # - Send email alert
        # - Integrate with security tools